name: Run Tests

on:
  workflow_call:
    inputs:
      EXTNAME:
        required: true
        type: string
      PHPBB_BRANCH:
        required: false
        default: '3.3.x'
        type: string
      SNIFF:
        required: false
        default: '1'
        type: string
      IMAGE_ICC:
        required: false
        default: '1'
        type: string
      EPV:
        required: false
        default: '1'
        type: string
      EXECUTABLE_FILES:
        required: false
        default: '1'
        type: string
      CODECOV:
        required: false
        default: '0'
        type: string
      RUN_MYSQL_JOBS:
        required: false
        type: string
        default: '1'
      RUN_PGSQL_JOBS:
        required: false
        type: string
        default: '1'
      RUN_MSSQL_JOBS:
        required: false
        type: string
        default: '1'
      RUN_WINDOWS_JOBS:
        required: false
        type: string
        default: '1'
      RUN_FUNCTIONAL_TESTS:
        required: false
        type: string
        default: '1'
      RUN_NPM_INSTALL:
        required: false
        type: string
        default: '0'
      RUN_COMPOSER_INSTALL:
        required: false
        type: string
        default: '0'
      PRIMARY_PHP_VERSION:
        required: false
        type: string
        default: '7.2'
      PHP_VERSION_MATRIX:
        required: false
        type: string
        default: '["7.2", "7.3", "7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]'
    secrets:
      CODECOV_TOKEN:
        required: false
        description: ''

env:
    EXTNAME: ${{ inputs.EXTNAME }}
    SNIFF: ${{ inputs.SNIFF == '1' && '1' || '0' }}
    IMAGE_ICC: ${{ inputs.IMAGE_ICC == '1' && '1' || '0' }}
    EPV: ${{ inputs.EPV == '1' && '1' || '0' }}
    EXECUTABLE_FILES: ${{ inputs.EXECUTABLE_FILES == '1' && '1' || '0' }}
    FUNCTIONAL_TESTS: ${{ inputs.RUN_FUNCTIONAL_TESTS == '1' && '1' || '0' }}
    PHPBB_BRANCH: ${{ inputs.PHPBB_BRANCH }}

jobs:
    # START Basic Checks Job (EPV, code sniffer, images check, etc.)
    basic-checks:
        if: ${{ inputs.EPV == '1' || inputs.EXECUTABLE_FILES == '1' || inputs.IMAGE_ICC == '1' || inputs.SNIFF == '1' }}
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                include:
                    - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                      db: 'none'
                      NOTESTS: 1

        name: PHP ${{ matrix.php }} - ${{ matrix.db }}

        steps:
            - name: Checkout phpBB
              uses: actions/checkout@v4
              with:
                  repository: phpbb/phpbb
                  ref: ${{ env.PHPBB_BRANCH }}
                  path: phpBB3

            - name: Checkout extension
              uses: actions/checkout@v4
              with:
                  path: phpBB3/phpBB/ext/${{ env.EXTNAME }}

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysqli, sqlite, pdo_sqlite, intl, gd, exif, iconv, sqlsrv, pdo_sqlsrv, ldap
                  coverage: none

            - name: Setup environment for phpBB
              env:
                  DB: ${{ matrix.db }}
                  PHP_VERSION: ${{ matrix.php }}
                  NOTESTS: '1'
              run: .github/setup-phpbb.sh "$DB" "$PHP_VERSION" "$NOTESTS"
              working-directory: ./phpBB3

            - name: Setup EPV
              if: ${{ env.EPV != '0' }}
              env:
                  PHP_VERSION: ${{ matrix.php }}
              run: |
                  if [[ "$(printf '%s\n' "$PHP_VERSION" "8.0" | sort -V | head -n1)" == "8.0" ]]; then
                    composer require phpbb/epv:dev-master --dev --no-interaction --ignore-platform-reqs --with-all-dependencies
                  else
                    composer require phpbb/epv:dev-master --dev --no-interaction --ignore-platform-reqs
                  fi
              working-directory: ./phpBB3/phpBB

            - name: Run code sniffer
              if: ${{ env.SNIFF != '0' }}
              env:
                  NOTESTS: '1'
              run: .github/ext-sniff.sh "$EXTNAME" "$NOTESTS"
              working-directory: ./phpBB3

            - name: Check image ICC profiles
              if: ${{ env.IMAGE_ICC != '0' }}
              run: .github/check-image-icc-profiles.sh
              working-directory: ./phpBB3

            - name: Check executable files
              if: ${{ env.EXECUTABLE_FILES != '0' }}
              run: .github/ext-check-executable-files.sh ./ "$EXTNAME"
              working-directory: ./phpBB3

            - name: Run EPV
              if: ${{ env.EPV != '0' }}
              run: phpBB/vendor/bin/EPV.php run --dir="phpBB/ext/$EXTNAME/"
              working-directory: ./phpBB3
    # END Basic Checks Job

    # START MySQL and MariaDB Job
    mysql-tests:
        if: ${{ inputs.RUN_MYSQL_JOBS == '1' }}
        runs-on: ubuntu-22.04
        strategy:
          matrix:
            php: ${{ fromJSON(inputs.PHP_VERSION_MATRIX) }}
            db: ['mysql:5.7']
            include:
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mariadb:10.1'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mariadb:10.2'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mariadb:10.3'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mariadb:10.4'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mariadb:10.5'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mysql:5.6'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'mysql:5.6'
                db_alias: 'MyISAM Tests'
                MYISAM: 1
              - php: ${{ startsWith(inputs.PRIMARY_PHP_VERSION, '7') && '7.4' || inputs.PRIMARY_PHP_VERSION }}
                db: 'mysql:8.0'
                COVERAGE: ${{ inputs.CODECOV == '1' && '1' || '0' }}
                db_alias: ${{ inputs.CODECOV == '1' && 'mysql:8.0 with Coverage' || 'mysql:8.0' }}

        name: PHP ${{ matrix.php }} - ${{ matrix.db_alias != '' && matrix.db_alias || matrix.db }}

        services:
            mysql:
                image: ${{ matrix.db }}
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: yes
                    MYSQL_DATABASE: phpbb_tests
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=3

            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: Checkout phpBB
              uses: actions/checkout@v4
              with:
                  repository: phpbb/phpbb
                  ref: ${{ env.PHPBB_BRANCH }}
                  path: phpBB3

            - name: Checkout extension
              uses: actions/checkout@v4
              with:
                  path: phpBB3/phpBB/ext/${{ env.EXTNAME }}

            - name: Set database type
              id: database-type
              env:
                  MATRIX_DB: ${{ matrix.db }}
              run: |
                  db="${MATRIX_DB%%:*}"
                  echo "db=$db" >> "$GITHUB_OUTPUT"

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysqli, sqlite, pdo_sqlite, intl, gd, exif, iconv, sqlsrv, pdo_sqlsrv, ldap
                  coverage: ${{ matrix.COVERAGE == '1' && 'xdebug' || 'none' }}

            - name: Setup environment for phpBB
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  PHP_VERSION: ${{ matrix.php }}
                  NOTESTS: '0'
              run: .github/setup-phpbb.sh "$DB" "$PHP_VERSION" "${NOTESTS:-0}"
              working-directory: ./phpBB3

            - name: Setup database
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  MYISAM: ${{ matrix.MYISAM != 1 && '0' || '1' }}
              run: .github/setup-database.sh "$DB" "$MYISAM"
              working-directory: ./phpBB3

            - name: Install Dependencies
              uses: phpbb-extensions/test-framework/actions/install-dependencies@3.3.x-experimental
              with:
                  RUN_NPM_INSTALL: ${{ inputs.RUN_NPM_INSTALL }}
                  RUN_COMPOSER_INSTALL: ${{ inputs.RUN_COMPOSER_INSTALL }}
                  EXTNAME: ${{ env.EXTNAME }}
                  PHP_VERSION: ${{ matrix.php }}

            - name: Setup PHPUnit files
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  COVERAGE: ${{ matrix.COVERAGE == '1' && '1' || '0' }}
              run: |
                  if [ "$COVERAGE" == '1' ]; then
                      sed -n '1h;1!H;${;g;s/<\/php>/<\/php>\n\t<filter>\n\t\t<whitelist>\n\t\t\t<directory>..\/<\/directory>\n\t\t\t<exclude>\n\t\t\t\t<directory>..\/tests\/<\/directory>\n\t\t\t\t<directory>..\/language\/<\/directory>\n\t\t\t\t<directory>..\/migrations\/<\/directory>\n\t\t\t<\/exclude>\n\t\t<\/whitelist>\n\t<\/filter>/g;p;}' ".github/phpunit-$DB-github.xml" &> "phpBB/ext/$EXTNAME/.github/phpunit-$DB-github.xml"
                  else
                      mkdir -p "phpBB/ext/$EXTNAME/.github" && cp .github/phpunit* "$_"
                  fi
              working-directory: ./phpBB3

            - name: Setup Codecove.io Path Fix
              if: ${{ matrix.COVERAGE == '1' }}
              run: |
                  if [ ! -f .github/codecov.yml ]; then
                      mkdir -p .github
                      echo "fixes:" > .github/codecov.yml
                      echo "    - \"/phpBB3/phpBB/ext/${EXTNAME}::\"" >> .github/codecov.yml
                  fi

            - name: Run unit tests
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  COVERAGE: ${{ matrix.COVERAGE == '1' && '1' || '0' }}
              run: |
                  args=()
                  if [ "$COVERAGE" == "1" ]; then
                      args+=(--coverage-clover build/logs/clover.xml)
                  fi
                  if [ "$FUNCTIONAL_TESTS" == "0" ]; then
                      args+=(--exclude-group functional)
                  fi

                  phpBB/vendor/bin/phpunit \
                      --configuration "phpBB/ext/$EXTNAME/.github/phpunit-$DB-github.xml" \
                      --bootstrap ./tests/bootstrap.php \
                      "${args[@]}"
              working-directory: ./phpBB3

            - name: Send code coverage
              if: ${{ matrix.COVERAGE == '1' }}
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
    # END MySQL and MariaDB Job

    # START PostgreSQL Job
    postgres-tests:
        if: ${{ inputs.RUN_PGSQL_JOBS == '1' }}
        runs-on: ubuntu-22.04
        strategy:
          matrix:
            php: ${{ fromJSON(inputs.PHP_VERSION_MATRIX) }}
            db: ['postgres:14']
            include:
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:9.5'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:9.6'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:10'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:11'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:12'
              - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                db: 'postgres:13'

        name: PHP ${{ matrix.php }} - ${{ matrix.db }}

        services:
            postgres:
                image: ${{ matrix.db != 'postgres:9.5' && matrix.db != 'postgres:9.6' && matrix.db != 'postgres:10' && matrix.db != 'postgres:11' && matrix.db != 'postgres:12' && matrix.db != 'postgres:13' && 'postgres:10' || matrix.db }}
                env:
                    POSTGRES_HOST: localhost
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                ports:
                    - 5432:5432
                options: >-
                    -v /var/run/postgresql:/var/run/postgresql
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: Checkout phpBB
              uses: actions/checkout@v4
              with:
                  repository: phpbb/phpbb
                  ref: ${{ env.PHPBB_BRANCH }}
                  path: phpBB3

            - name: Checkout extension
              uses: actions/checkout@v4
              with:
                  path: phpBB3/phpBB/ext/${{ env.EXTNAME }}

            - name: Set database type
              id: database-type
              env:
                  MATRIX_DB: ${{ matrix.db }}
              run: |
                  db="${MATRIX_DB%%:*}"
                  echo "db=$db" >> "$GITHUB_OUTPUT"

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysqli, sqlite, pdo_sqlite, intl, gd, exif, iconv, sqlsrv, pdo_sqlsrv, ldap
                  coverage: none

            - name: Setup environment for phpBB
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  PHP_VERSION: ${{ matrix.php }}
                  NOTESTS: '0'
              run: .github/setup-phpbb.sh "$DB" "$PHP_VERSION" "${NOTESTS:-0}"
              working-directory: ./phpBB3

            - name: Setup database
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  MYISAM: '0'
              run: .github/setup-database.sh "$DB" "$MYISAM"
              working-directory: ./phpBB3

            - name: Install Dependencies
              uses: phpbb-extensions/test-framework/actions/install-dependencies@3.3.x-experimental
              with:
                  RUN_NPM_INSTALL: ${{ inputs.RUN_NPM_INSTALL }}
                  RUN_COMPOSER_INSTALL: ${{ inputs.RUN_COMPOSER_INSTALL }}
                  EXTNAME: ${{ env.EXTNAME }}
                  PHP_VERSION: ${{ matrix.php }}

            - name: Setup PHPUnit files
              run: mkdir -p "phpBB/ext/$EXTNAME/.github" && cp .github/phpunit* "$_"
              working-directory: ./phpBB3

            - name: Run unit tests
              env:
                  DB: ${{steps.database-type.outputs.db}}
              run: |
                  args=()
                  if [ "$FUNCTIONAL_TESTS" == "0" ]; then
                      args+=(--exclude-group functional)
                  fi

                  phpBB/vendor/bin/phpunit \
                      --configuration "phpBB/ext/$EXTNAME/.github/phpunit-$DB-github.xml" \
                      --bootstrap ./tests/bootstrap.php \
                      "${args[@]}"
              working-directory: ./phpBB3
    # END PostgreSQL Job

    # START Other Tests Job (SQLite 3 and mssql)
    other-tests:
        if: ${{ inputs.RUN_MSSQL_JOBS == '1' }}
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                include:
                    - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                      db: "sqlite3"
                    - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                      db: "mcr.microsoft.com/mssql/server:2019-CU27-ubuntu-20.04"
                      db_alias: 'MSSQL 2019'
                    - php: ${{ inputs.PRIMARY_PHP_VERSION }}
                      db: "mcr.microsoft.com/mssql/server:2022-CU13-ubuntu-22.04"
                      db_alias: 'MSSQL 2022'

        name: PHP ${{ matrix.php }} - ${{ matrix.db_alias != '' && matrix.db_alias || matrix.db }}

        services:
            mssql:
                image: ${{ matrix.db != 'mcr.microsoft.com/mssql/server:2022-CU13-ubuntu-22.04' && matrix.db != 'mcr.microsoft.com/mssql/server:2019-CU27-ubuntu-20.04' && 'mcr.microsoft.com/mssql/server:2022-CU13-ubuntu-22.04' || matrix.db }}
                env:
                    SA_PASSWORD: "Pssw0rd_12"
                    ACCEPT_EULA: "y"
                ports:
                    - 1433:1433
                options: >-
                    --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Pssw0rd_12' -Q \"Use [master]; CREATE DATABASE [phpbb_tests] COLLATE Latin1_General_CI_AS\" || exit 1"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                    --health-start-period 10s

            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: Checkout phpBB
              uses: actions/checkout@v4
              with:
                  repository: phpbb/phpbb
                  ref: ${{ env.PHPBB_BRANCH }}
                  path: phpBB3

            - name: Checkout extension
              uses: actions/checkout@v4
              with:
                  path: phpBB3/phpBB/ext/${{ env.EXTNAME }}

            - name: Set database type
              id: database-type
              env:
                  MATRIX_DB: ${{ matrix.db }}
              run: |
                  if [ "$MATRIX_DB" == 'mcr.microsoft.com/mssql/server:2022-CU13-ubuntu-22.04' ] || [ "$MATRIX_DB" == 'mcr.microsoft.com/mssql/server:2019-CU27-ubuntu-20.04' ]
                  then
                      db='mssql'
                  else
                      db="${MATRIX_DB%%:*}"
                  fi
                  echo "db=$db" >> "$GITHUB_OUTPUT"

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysqli, sqlite, pdo_sqlite, intl, gd, exif, iconv, sqlsrv, pdo_sqlsrv, ldap
                  coverage: none

            - name: Setup environment for phpBB
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  PHP_VERSION: ${{ matrix.php }}
                  NOTESTS: '0'
              run: .github/setup-phpbb.sh "$DB" "$PHP_VERSION" "${NOTESTS:-0}"
              working-directory: ./phpBB3

            - name: Setup database
              env:
                  DB: ${{steps.database-type.outputs.db}}
                  MYISAM: '0'
              run: .github/setup-database.sh "$DB" "$MYISAM"
              working-directory: ./phpBB3

            - name: Install Dependencies
              uses: phpbb-extensions/test-framework/actions/install-dependencies@3.3.x-experimental
              with:
                  RUN_NPM_INSTALL: ${{ inputs.RUN_NPM_INSTALL }}
                  RUN_COMPOSER_INSTALL: ${{ inputs.RUN_COMPOSER_INSTALL }}
                  EXTNAME: ${{ env.EXTNAME }}
                  PHP_VERSION: ${{ matrix.php }}

            - name: Setup PHPUnit files
              run: mkdir -p "phpBB/ext/$EXTNAME/.github" && cp .github/phpunit* "$_"
              working-directory: ./phpBB3

            - name: Run unit tests
              env:
                  DB: ${{steps.database-type.outputs.db}}
              run: |
                  args=()
                  if [ "$FUNCTIONAL_TESTS" == "0" ]; then
                      args+=(--exclude-group functional)
                  fi

                  phpBB/vendor/bin/phpunit \
                      --configuration "phpBB/ext/$EXTNAME/.github/phpunit-$DB-github.xml" \
                      --bootstrap ./tests/bootstrap.php \
                      "${args[@]}"
              working-directory: ./phpBB3
    # END Other Tests Job

    # Test with IIS & PostgreSQL on Windows
    windows-tests:
        if: ${{ inputs.RUN_WINDOWS_JOBS == '1' }}
        runs-on: windows-latest
        strategy:
            matrix:
                php:
                  - ${{ startsWith(inputs.PRIMARY_PHP_VERSION, '7') && '7.4' || inputs.PRIMARY_PHP_VERSION }}
                db:
                  - postgres

        name: PHP ${{ matrix.php }} - Windows

        steps:
            - name: Prepare git for Windows
              run: |
                  git config --system core.autocrlf false
                  git config --system core.eol lf

            - name: Checkout phpBB
              uses: actions/checkout@v4
              with:
                  repository: phpbb/phpbb
                  ref: ${{ env.PHPBB_BRANCH }}
                  path: phpBB3

            - name: Checkout extension
              uses: actions/checkout@v4
              with:
                  path: phpBB3/phpBB/ext/${{ env.EXTNAME }}

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, intl, gd, exif, iconv, pgsql, pdo_pgsql
                  ini-values: upload_tmp_dir=${{ runner.temp }}, sys_temp_dir=${{ runner.temp }}
                  coverage: none

            - name: Setup environment for phpBB
              env:
                  GITHUB_WORKSPACE: ${{ github.workspace }}
                  TEMP_DIR: ${{ runner.temp }}
              run: |
                  Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole, IIS-WebServer, IIS-CommonHttpFeatures, IIS-ManagementConsole, IIS-HttpErrors, IIS-HttpRedirect, IIS-WindowsAuthentication, IIS-StaticContent, IIS-DefaultDocument, IIS-HttpCompressionStatic, IIS-DirectoryBrowsing, IIS-WebServerManagementTools, IIS-CGI -All
                  Set-Service wuauserv -StartupType Manual
                  (Get-Content ${env:GITHUB_WORKSPACE}\phpBB3\phpBB\web.config).replace("<configuration>", "<configuration>`n`t<system.web>`n`t`t<customErrors mode=`"Off`"/>`n`t</system.web>") | Set-Content ${env:GITHUB_WORKSPACE}\phpBB3\phpBB\web.config
                  (Get-Content ${env:GITHUB_WORKSPACE}\phpBB3\phpBB\web.config).replace("`t</system.webServer>", "`t`t<httpErrors errorMode=`"Detailed`" />`n`t</system.webServer>") | Set-Content ${env:GITHUB_WORKSPACE}\phpBB3\phpBB\web.config
                  choco install urlrewrite -y
                  Import-Module WebAdministration
                  New-WebSite -Name 'phpBBTest' -PhysicalPath "${env:GITHUB_WORKSPACE}\phpBB3\phpBB" -Force
                  $session = Get-PSSession -Name WinPSCompatSession
                  $sb = {Set-ItemProperty 'IIS:\Sites\phpBBTest' -name Bindings -value @{protocol='http';bindingInformation='*:80:phpbb.test'}}
                  Invoke-Command -Scriptblock $sb -Session $session
                  $sb = {Set-WebConfigurationProperty -filter /system.WebServer/security/authentication/AnonymousAuthentication -name enabled -value true -location "IIS:\Sites\phpBBTest"}
                  Invoke-Command -Scriptblock $sb -Session $session
                  Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`r`n127.0.0.1`tphpbb.test" -Force
                  [System.Environment]::SetEnvironmentVariable('PATH',$Env:PATH+";%windir%\system32\inetsrv")
                  echo Setup FAST-CGI configuration
                  Add-WebConfiguration -Filter /system.webServer/fastCgi -PSPath IIS:\ -Value @{fullpath="C:\tools\php\php-cgi.exe"}
                  echo Setup FACT-CGI handler
                  New-WebHandler -Name "PHP-FastCGI" -Path "*.php" -Modules FastCgiModule -ScriptProcessor "C:\tools\php\php-cgi.exe" -Verb '*' -ResourceType Either
                  iisreset
                  NET START W3SVC
                  mkdir "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\cache\test"
                  mkdir "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\cache\installer"
                  icacls "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\cache" /grant Users:F /T
                  icacls "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\files" /grant "Users:(OI)(CI)F" /T
                  icacls "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\images" /grant "Users:(OI)(CI)F" /T
                  icacls "${env:GITHUB_WORKSPACE}\phpBB3\phpBB\store" /grant "Users:(OI)(CI)F" /T
                  $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
                  $acl = Get-ACL "${env:TEMP_DIR}"
                  $acl.AddAccessRule($accessRule)
                  Set-ACL -Path "${env:TEMP_DIR}" -ACLObject $acl
                  cd ${env:GITHUB_WORKSPACE}\phpBB3\phpBB
                  php ..\composer.phar install
                  php ..\composer.phar remove phpunit/dbunit --dev --update-with-dependencies
                  php ..\composer.phar require symfony/yaml:~4.4 misantron/dbunit:~5.0 phpunit/phpunit:^9.3 doctrine/instantiator:^1.4 --dev --update-with-all-dependencies --ignore-platform-reqs
                  cd ..

            - name: Setup database
              run: |
                  $postgreSqlSvc = Get-Service "postgresql*"
                  Set-Service $postgreSqlSvc.Name -StartupType manual
                  $runningStatus = [System.ServiceProcess.ServiceControllerStatus]::Running
                  $maxStartTimeout = New-TimeSpan -Seconds 30
                  try {
                    $postgreSqlSvc.Start()
                    $postgreSqlSvc.WaitForStatus($runningStatus, $maxStartTimeout)
                  } catch  {
                    $_ | select *
                  }
                  [System.Environment]::SetEnvironmentVariable('PATH',$Env:PATH+";${env:PGBIN}")
                  $env:PGPASSWORD = 'root'
                  psql -c 'ALTER SYSTEM SET hot_standby = on;' -U postgres
                  psql -c 'ALTER SYSTEM SET wal_level = minimal;' -U postgres
                  psql -c 'DROP DATABASE IF EXISTS phpbb_tests;' -U postgres
                  psql -c 'create database phpbb_tests;' -U postgres
                  Set-MpPreference -ExclusionPath "${env:PGDATA}" # Exclude PGDATA directory from Windows Defender
                  Set-MpPreference -DisableRealtimeMonitoring $true

            - name: Install Dependencies
              uses: phpbb-extensions/test-framework/actions/install-dependencies@3.3.x-experimental
              with:
                  RUN_NPM_INSTALL: ${{ inputs.RUN_NPM_INSTALL }}
                  RUN_COMPOSER_INSTALL: ${{ inputs.RUN_COMPOSER_INSTALL }}
                  EXTNAME: ${{ env.EXTNAME }}
                  PHP_VERSION: ${{ matrix.php }}

            - name: Setup PHPUnit files
              run: |
                  if (-not (Test-Path "phpBB\ext\$env:EXTNAME\.github")) { 
                    mkdir "phpBB\ext\$env:EXTNAME\.github" 
                  }
                  Copy-Item ".github\phpunit*" -Destination "phpBB\ext\$env:EXTNAME\.github" -Force
              working-directory: ./phpBB3

            - name: Run unit tests
              run: |
                  $args = @(
                    "--configuration", "phpBB/ext/$env:EXTNAME/.github/phpunit-psql-windows-github.xml",
                    "--bootstrap", "./tests/bootstrap.php",
                    "--verbose",
                    "--stop-on-error"
                  )

                  if ($env:FUNCTIONAL_TESTS -eq "0") {
                    $args += "--exclude-group"
                    $args += "functional"
                  }

                  phpBB/vendor/bin/phpunit @args
              working-directory: ./phpBB3
    # END IIS & PostgreSQL on Windows Tests Job
